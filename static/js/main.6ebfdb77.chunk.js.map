{"version":3,"sources":["components/Header/pokemon-banner.jpg","components/Header/index.js","components/Wrapper/index.js","components/ImageCard/index.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","id","href","status","score","highScore","src","banner","alt","Wrapper","children","ImageCard","onClick","updateScore","image","name","App","state","cleared","board","pokemon","slice","clicked","_this","indexOf","push","setState","updateBoard","length","newBoard","randomizer","arr","current","random","Math","floor","temp","_this2","this","Fragment","components_Header","components_Wrapper","map","mon","components_ImageCard","key","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6ebfdb77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon-banner.d7123855.jpg\";","import React from \"react\";\r\nimport \"./style.css\";\r\nimport banner from './pokemon-banner.jpg';\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className=\"navbar-fixed\">\r\n      <nav>\r\n        <div id=\"title\" className=\"nav-wrapper red lighten-2\">\r\n          <a href=\"/\" className=\"brand-logo center\">Pokemon Clicky Game</a>\r\n        </div>\r\n      </nav>\r\n\r\n      <div id=\"scores\" className=\"row red lighten-3\">\r\n        <div className=\"col s6\">\r\n          <h2 className=\"center status\">{props.status}</h2>\r\n        </div>\r\n\r\n        <div className=\"col s6\">\r\n          <div className=\"row\">\r\n            <div className=\"col s12 m6\">\r\n              <h2 className=\"score right\">Score: {props.score}</h2>   \r\n            </div>\r\n\r\n            <div className=\"col s12 m6\">\r\n              <h2 className=\"high-score right\">High Score: {props.highScore}</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"banner\">\r\n        <div className=\"parallax-container\">\r\n          <div className=\"parallax center\">\r\n            <img src={banner} alt=\"Banner\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"instructions\" className=\"row\">\r\n          <div className=\"col s12 offset-m3 m6\">\r\n            <h2 className=\"center\">Instructions</h2>\r\n\r\n            <ol>\r\n              <li>Click on an image.</li>\r\n              <li>The positions of the images on the board will then be shuffled.\r\n                <ul>\r\n                  <li>If the image <em>has not been clicked before</em>, your score will increase by 1.</li>\r\n                  <li>If the image <em>has been clicked before</em>, you <strong>lose</strong> the game.</li>\r\n                </ul>\r\n              </li>\r\n              <li>If you lose the game, your score is reset to 0.</li>\r\n              <li>If you have guessed all of the images correctly, the board will reset with a new set of images.</li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <main className=\"container\">\r\n      {props.children}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ImageCard = (props) => {\r\n  return (\r\n    <div className=\"col s12 m3\">\r\n      <div className=\"card hoverable\" onClick={() => props.updateScore(props.id)}>\r\n        <div className=\"card-image center\">\r\n          <img src={props.image} alt={props.name} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCard;","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport Header from './components/Header';\r\nimport Wrapper from './components/Wrapper';\r\nimport ImageCard from './components/ImageCard';\r\nimport pokemon from './pokemon.json';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    status: \"Click an image to begin.\",\r\n    highScore: 0,\r\n    score: 0,\r\n    cleared: 0,\r\n    board: pokemon.slice(0, 12),\r\n    clicked: [],\r\n    pokemon\r\n  };\r\n\r\n  // Updates (and resets) the score and high score.\r\n  updateScore = id => {\r\n    const clicked = this.state.clicked;\r\n\r\n    if(clicked.indexOf(id) < 0) {\r\n      clicked.push(id);\r\n\r\n      this.setState({\r\n        status: \"You guessed correctly!\",\r\n        score: this.state.score + 1,\r\n        clicked: clicked,\r\n        board: this.updateBoard()\r\n      });\r\n\r\n      // Updates the high score.\r\n      if(this.state.score >= this.state.highScore) this.setState({highScore: this.state.score + 1});\r\n\r\n      // Checks if the user has won the game.\r\n      if((this.state.score + 1) % this.state.board.length === 0) {\r\n        const cleared = this.state.cleared + 1;\r\n\r\n        this.setState({\r\n          status: \"You cleared \" + ((cleared > 1) ? cleared + \" boards.\": \"1 board.\"),\r\n          clicked: [],\r\n          cleared: cleared,\r\n          board: this.newBoard()\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        status: \"You guessed incorrectly!\",\r\n        score: 0,\r\n        clicked: [],\r\n        cleared: 0,\r\n        board: this.updateBoard()\r\n      });\r\n    }\r\n  };\r\n\r\n  randomizer = arr => {\r\n    let current = arr.length;\r\n\r\n    while(0 !== current) {\r\n      let random = Math.floor(Math.random() * current);\r\n      current--;\r\n\r\n      let temp = arr[current];\r\n      arr[current] = arr[random];\r\n      arr[random] = temp;\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  // Updates the board of displayed images.\r\n  updateBoard = () => this.randomizer(this.state.board);\r\n\r\n  // Sets up a new game.\r\n  newBoard = () => this.randomizer(this.state.pokemon).slice(0, 12);\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header status={this.state.status} score={this.state.score} highScore={this.state.highScore} />\r\n        <Wrapper>\r\n          <div className=\"row\">\r\n            {this.state.board.map(mon => <ImageCard\r\n              key={mon.id}\r\n              id={mon.id}\r\n              name={mon.name}\r\n              image={mon.image}\r\n              updateScore={this.updateScore}\r\n            />)}\r\n          </div>\r\n        </Wrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}